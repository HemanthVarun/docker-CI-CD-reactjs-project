Terraform Code to provision the EKS Cluster.

# Configure the AWS provider
provider "aws" {
  region = "ap-south-1"
}

# Create the VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "my-vpc"
  }
}

# Create an internet gateway
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "my-internet-gateway"
 }
}

# Create public subnets in two different Availability Zones
resource "aws_subnet" "public_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.128.0/17"
  availability_zone = "ap-south-1a"

  tags = {
    Name = "public-subnet"
  }
}

resource "aws_subnet" "private_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.64.0/18"
  availability_zone = "ap-south-1b"

  tags = {
    Name = "public-subnet-2"
  }
}

# Create the EKS cluster role
resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

# Attach the EKS cluster policy to the EKS cluster role
resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster_role.name
}

# Attach the EKS service policy to the EKS cluster role
resource "aws_iam_role_policy_attachment" "eks_service_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
  role       = aws_iam_role.eks_cluster_role.name
}

# Create the EKS worker node role
resource "aws_iam_role" "eks_node_role" {
  name = "eks-node-role"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

# Attach the EKS node policy to the EKS worker node role
resource "aws_iam_role_policy_attachment" "eks_node_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"             # This should be AmazonEKSWorkerNodePolicy
  role       = aws_iam_role.eks_node_role.name
}

# Terraform will automatically attach required policies for EKS CNI

# Create the EKS cluster
resource "aws_eks_cluster" "my_cluster" {
  name          = "my-cluster"
  role_arn      = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids = [
      aws_subnet.public_subnet.id, aws_subnet.private_subnet.id
    ]
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_policy,
    aws_iam_role_policy_attachment.eks_service_policy,
  ]
}

# Create the EKS worker node group
resource "aws_eks_node_group" "worker_nodes" {
  cluster_name  = aws_eks_cluster.my_cluster.name
  node_group_name = "worker-nodes"
  node_role_arn  = aws_iam_role.eks_node_role.arn

    subnet_ids = [
      aws_subnet.public_subnet.id, aws_subnet.private_subnet.id
    ]

  scaling_config {
    desired_size = 1
    max_size     = 1
    min_size     = 1
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_node_policy,
  ]
}

# (Replace with steps to build and push your ReactJS application image to ECR)

# # Commented out as deployment will be done using kubectl or Helm after EKS provisioning
# resource "kubernetes_deployment" "reactjs_app" {
#   metadata {
#     name = "reactjs-app"
#   }
# 
#   spec {
#     replicas = 1
# 
#     selector {
#       match_labels = {
#         app = "reactjs-app"
#       }
#     }
# 
#     template {
#       metadata {
#         labels = {
#           app = "reactjs-app"
#         }
#       }
# 
#       spec {
#         container {
#           name  = "reactjs-app"
#           image = 400864272903.dkr.ecr.ap-south-1.amazonaws.com/ci-projectdemo.reactjs_app.repository_url + ":v1"  # Update with your image tag
# 
#           port {
#             container_port = 3000
#           }
#         }
#       }
#     }
#   }
# }